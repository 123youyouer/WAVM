;; FannkuchRedux, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null

(module 

  (func $Program_fannkuch
    (param $n i32) (local $sign i32) (local $flag i32) (local $t i32) 

    (block 
      (set_local $sign (i32.const 1))
      (store_global $maxflips (i32.const 0))
      (store_global $sum (i32.const 0))
      (call $Program_initHeap (get_local $n) )

      ;; while (<JSBooleanLiteral True>)
      (label $loop_0 
        (loop 

          (if 
            (i32.const 1)
            (nop)
            (break $loop_0)
          )

          ;; while (...) { 
          (block 
            (call $Program_process0thElement (get_local $n) (get_local $sign) (i32.load (i32.const 128) ) )
            (set_local $flag (i32.eq 
                (get_local $sign)
                (i32.const 1)
              ))

            (if 
              (get_local $flag)
              (block 
                (set_local $t (i32.load (i32.const 132) ))
                (i32.store 
                  (i32.const 132)
                  (i32.load (i32.const 128) )
                )
                (i32.store 
                  (i32.const 128)
                  (get_local $t)
                )
                (set_local $sign (i32.const -1))
              )
              (block 
                (set_local $sign (i32.const 1))

                (if 
                  (call $Program_permuteNegativeSign (get_local $n) )
                  (break $loop_0)
                )
              )
            )
          )
        )
      )
    )
  )

  (func $Program_get_MaxFlips

    (result i32)

    (return (load_global $maxflips))
  )

  (func $Program_get_Sum

    (result i32)

    (return (load_global $sum))
  )

  (func $Program_initHeap
    (param $n i32) (local $i i32) (local $num i32) 

    (block 

      ;; for (var (@<var System.Int32 i> = 0); ...)
      (set_local $i (i32.const 0))

      (label $loop_0 
        (loop 
          ;; for (...; (@<var System.Int32 i> < @<parameter System.Int32 n>); ...)

          (if 
            (i32.lt_s 
              (get_local $i)
              (get_local $n)
            )
            (nop)
            (break $loop_0)
          )

          ;; for (...) { 
          (block 
            (i32.store 
              (i32.mul 
                (i32.add 
                  (i32.const 32)
                  (get_local $i)
                )
                (i32.const 4)
              )
              (get_local $i)
            )
            (i32.store 
              (i32.mul 
                (i32.add 
                  (i32.const 64)
                  (get_local $i)
                )
                (i32.const 4)
              )
              (get_local $i)
            )
            (i32.store 
              (i32.mul 
                (i32.add 
                  (i32.const 96)
                  (get_local $i)
                )
                (i32.const 4)
              )
              (get_local $i)
            )
            (set_local $num (get_local $i))
            (set_local $i (i32.add 
                (get_local $num)
                (i32.const 1)
              ))
          )
        )
      )
    )
  )

  (func $Program_permuteNegativeSign
    (param $n i32) (local $t i32) (local $j i32) (local $sx i32) 
    (local $flag2 i32) (local $result i32) (local $k i32) (local $num i32) 

    (result i32)

    (block 
      (set_local $t (i32.load (i32.const 132) ))
      (i32.store 
        (i32.const 132)
        (i32.load (i32.const 136) )
      )
      (i32.store 
        (i32.const 136)
        (get_local $t)
      )

      ;; for (var (@<var System.Int32 j> = 2); ...)
      (set_local $j (i32.const 2))

      (label $loop_0 
        (loop 
          ;; for (...; (@<var System.Int32 j> < @<parameter System.Int32 n>); ...)

          (if 
            (i32.lt_s 
              (get_local $j)
              (get_local $n)
            )
            (nop)
            (break $loop_0)
          )

          ;; for (...) { 
          (block 
            (set_local $sx (i32.load (i32.mul 
                  (i32.add 
                    (i32.const 96)
                    (get_local $j)
                  )
                  (i32.const 4)
                ) ))

            (if 
              (i32.gt_s 
                (get_local $sx)
                (i32.const 0)
              )
              (block 
                (i32.store 
                  (i32.mul 
                    (i32.add 
                      (i32.const 96)
                      (get_local $j)
                    )
                    (i32.const 4)
                  )
                  (i32.sub 
                    (get_local $sx)
                    (i32.const 1)
                  )
                )
                (break $loop_0)
              )
            )
            (set_local $flag2 (i32.eq 
                (get_local $j)
                (i32.sub 
                  (get_local $n)
                  (i32.const 1)
                )
              ))

            (if 
              (get_local $flag2)
              (block 
                (set_local $result (i32.const 1))
                (return (get_local $result))
              )
            )
            (i32.store 
              (i32.mul 
                (i32.add 
                  (i32.const 96)
                  (get_local $j)
                )
                (i32.const 4)
              )
              (get_local $j)
            )
            (set_local $t (i32.load (i32.const 128) ))

            ;; for (var (@<var System.Int32 k> = 0); ...)
            (set_local $k (i32.const 0))

            (label $loop_1 
              (loop 
                ;; for (...; (@<var System.Int32 k> <= @<var System.Int32 j>); ...)

                (if 
                  (i32.le_s 
                    (get_local $k)
                    (get_local $j)
                  )
                  (nop)
                  (break $loop_1)
                )

                ;; for (...) { 
                (block 
                  (i32.store 
                    (i32.mul 
                      (i32.add 
                        (i32.const 32)
                        (get_local $k)
                      )
                      (i32.const 4)
                    )
                    (i32.load (i32.mul 
                        (i32.add 
                          (i32.const 32)
                          (i32.add 
                            (get_local $k)
                            (i32.const 1)
                          )
                        )
                        (i32.const 4)
                      ) )
                  )
                  (set_local $num (get_local $k))
                  (set_local $k (i32.add 
                      (get_local $num)
                      (i32.const 1)
                    ))
                )
              )
            )
            (i32.store 
              (i32.mul 
                (i32.add 
                  (i32.const 32)
                  (i32.add 
                    (get_local $j)
                    (i32.const 1)
                  )
                )
                (i32.const 4)
              )
              (get_local $t)
            )
            (set_local $num (get_local $j))
            (set_local $j (i32.add 
                (get_local $num)
                (i32.const 1)
              ))
          )
        )
      )
      (set_local $result (i32.const 0))
      (return (get_local $result))
    )
  )

  (func $Program_process0thElement
    (param $n i32) (param $sign i32) (param $q0 i32) (local $flag i32) 
    (local $i i32) (local $num i32) (local $flips i32) (local $qq i32) 
    (local $flag3 i32) (local $j i32) (local $k i32) (local $t i32) 
    (local $flag4 i32) 

    (block 
      (set_local $flag (i32.gt_s 
          (get_local $q0)
          (i32.const 0)
        ))

      (if 
        (get_local $flag)
        (block 

          ;; for (var (@<var System.Int32 i> = 1); ...)
          (set_local $i (i32.const 1))

          (label $loop_0 
            (loop 
              ;; for (...; (@<var System.Int32 i> < @<parameter System.Int32 n>); ...)

              (if 
                (i32.lt_s 
                  (get_local $i)
                  (get_local $n)
                )
                (nop)
                (break $loop_0)
              )

              ;; for (...) { 
              (block 
                (i32.store 
                  (i32.mul 
                    (i32.add 
                      (i32.const 64)
                      (get_local $i)
                    )
                    (i32.const 4)
                  )
                  (i32.load (i32.mul 
                      (i32.add 
                        (i32.const 32)
                        (get_local $i)
                      )
                      (i32.const 4)
                    ) )
                )
                (set_local $num (get_local $i))
                (set_local $i (i32.add 
                    (get_local $num)
                    (i32.const 1)
                  ))
              )
            )
          )
          (set_local $flips (i32.const 1))

          ;; while (<JSBooleanLiteral True>)
          (label $loop_1 
            (loop 

              (if 
                (i32.const 1)
                (nop)
                (break $loop_1)
              )

              ;; while (...) { 
              (block 
                (set_local $qq (i32.load (i32.mul 
                      (i32.add 
                        (i32.const 64)
                        (get_local $q0)
                      )
                      (i32.const 4)
                    ) ))

                (if 
                  (i32.eq 
                    (get_local $qq)
                    (i32.const 0)
                  )
                  (break $loop_1)
                )
                (i32.store 
                  (i32.mul 
                    (i32.add 
                      (i32.const 64)
                      (get_local $q0)
                    )
                    (i32.const 4)
                  )
                  (get_local $q0)
                )
                (set_local $flag3 (i32.ge_s 
                    (get_local $q0)
                    (i32.const 3)
                  ))

                (if 
                  (get_local $flag3)
                  (block 
                    (set_local $j (i32.const 1))
                    (set_local $k (i32.sub 
                        (get_local $q0)
                        (i32.const 1)
                      ))

                    ;; do {
                    (label $loop_2 
                      (loop 
                        (block 
                          (set_local $t (i32.load (i32.mul 
                                (i32.add 
                                  (i32.const 64)
                                  (get_local $j)
                                )
                                (i32.const 4)
                              ) ))
                          (i32.store 
                            (i32.mul 
                              (i32.add 
                                (i32.const 64)
                                (get_local $j)
                              )
                              (i32.const 4)
                            )
                            (i32.load (i32.mul 
                                (i32.add 
                                  (i32.const 64)
                                  (get_local $k)
                                )
                                (i32.const 4)
                              ) )
                          )
                          (i32.store 
                            (i32.mul 
                              (i32.add 
                                (i32.const 64)
                                (get_local $k)
                              )
                              (i32.const 4)
                            )
                            (get_local $t)
                          )
                          (set_local $num (get_local $j))
                          (set_local $j (i32.add 
                              (get_local $num)
                              (i32.const 1)
                            ))
                          (set_local $num (get_local $k))
                          (set_local $k (i32.sub 
                              (get_local $num)
                              (i32.const 1)
                            ))
                        )

                        ;; do { ... } while ((@<var System.Int32 j> < @<var System.Int32 k>))

                        (if 
                          (i32.lt_s 
                            (get_local $j)
                            (get_local $k)
                          )
                          (nop)
                          (break $loop_2)
                        )
                      )
                    )
                  )
                )
                (set_local $q0 (get_local $qq))
                (set_local $num (get_local $flips))
                (set_local $flips (i32.add 
                    (get_local $num)
                    (i32.const 1)
                  ))
              )
            )
          )
          (store_global $sum (i32.add 
              (load_global $sum)
              (i32.mul 
                (get_local $sign)
                (get_local $flips)
              )
            ))
          (set_local $flag4 (i32.gt_s 
              (get_local $flips)
              (load_global $maxflips)
            ))

          (if 
            (get_local $flag4)
            (store_global $maxflips (get_local $flips))
          )
        )
      )
    )
  )

  (export "fannkuch" $Program_fannkuch)
  (export "get_MaxFlips" $Program_get_MaxFlips)
  (export "get_Sum" $Program_get_Sum)

  (global $maxflips i32)
  (global $sum i32)

  (memory 4096 4096)

)


(invoke "fannkuch" (i32.const 7) )
(assert_eq (invoke "get_Sum"  ) (i32.const 228) )
(assert_eq (invoke "get_MaxFlips"  ) (i32.const 16) )
