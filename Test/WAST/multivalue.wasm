;; (c) 2015 Andreas Rossberg

(module
  ;; Swap
  (func $swap (param i32 i32) (result i32 i32)
    (return (get_local 1) (get_local 0))
  )

  ;; Test
  (func $test (param $case i32) (result i32 i32)
    (local $x1 i32)
    (local $x2 i32)
    (set_local $x1 (i32.const 1))
    (set_local $x2 (i32.const 2))
    (i32.switch (get_local $case)
      ;; Destructure
      (case 1
        (destruct $x1 $x2 (call $swap (get_local $x1) (get_local $x2)))
        (return (get_local $x1) (get_local $x2))
      )
      ;; Return directly
      (case 2
        (return (call $swap (get_local $x1) (get_local $x2)))
      )
      ;; Pass on to other call
      (case 3
        (return (call $swap (call $swap (get_local $x1) (get_local $x2))))
      )
      ;; Break
      (case 4
        (destruct $x1 $x2
          (label $l (call $swap (break $l (get_local $x1) (get_local $x2))))
        )
        (return (get_local $x1) (get_local $x2))
      )
      ;; Pass on to break
      (case 5
        (return
          (label $l
            (call $swap (break $l (call $swap (get_local $x1) (get_local $x2))))
          )
        )
      )
      ;; Pass through block
      (case 6
        (return
          (block
            (set_local $x2 (i32.const 3))
            (call $swap (get_local $x1) (get_local $x2))
          )
        )
      )
      ;; Pass through conditional
      (case 7)
      (case 8
        (return
          (if (i32.eq (i32.rem_s (get_local $case) (i32.const 2)) (i32.const 0))
            (call $swap (get_local $x1) (get_local $x2))
            (call $swap (get_local $x2) (get_local $x1))
          )
        )
      )
      ;; Pass through switch
      (case 9)
      (case 10)
      (case 11
        (return
          (i32.switch (get_local $case)
            (case 9 (call $swap (get_local $x1) (get_local $x2)))
            (case 10 (call $swap (get_local $x2) (get_local $x1)))
            (label $l (break $l (get_local $x1) (get_local $x1)))
          )
        )
      )
      ;; Dummy default
      (return (get_local $x1) (get_local $x2))
    )
  )

  (export "test" $test)
)

(assert_eq (invoke "test" (i32.const 1)) (i32.const 2) (i32.const 1)) 
(assert_eq (invoke "test" (i32.const 2)) (i32.const 2) (i32.const 1))
(assert_eq (invoke "test" (i32.const 3)) (i32.const 1) (i32.const 2))
(assert_eq (invoke "test" (i32.const 4)) (i32.const 1) (i32.const 2))
(assert_eq (invoke "test" (i32.const 5)) (i32.const 2) (i32.const 1))
(assert_eq (invoke "test" (i32.const 6)) (i32.const 3) (i32.const 1))
(assert_eq (invoke "test" (i32.const 7)) (i32.const 1) (i32.const 2))
(assert_eq (invoke "test" (i32.const 8)) (i32.const 2) (i32.const 1))
(assert_eq (invoke "test" (i32.const 9)) (i32.const 2) (i32.const 1))
(assert_eq (invoke "test" (i32.const 10)) (i32.const 1) (i32.const 2))
(assert_eq (invoke "test" (i32.const 11)) (i32.const 1) (i32.const 1))
